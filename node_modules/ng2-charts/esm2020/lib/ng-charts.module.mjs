import { Injectable, NgModule, Optional } from '@angular/core';
import { BaseChartDirective } from './base-chart.directive';
import { ArcElement, BarController, BarElement, BubbleController, CategoryScale, Chart, defaults, DoughnutController, Filler, Legend, LinearScale, LineController, LineElement, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, ScatterController, TimeSeriesScale, Title, Tooltip } from 'chart.js';
import { merge } from "lodash-es";
import { builtInDefaults } from "./get-colors";
import * as i0 from "@angular/core";
Chart.register(Title, Tooltip, Filler, Legend, LineController, LineElement, PointElement, LinearScale, CategoryScale, BarController, BarElement, DoughnutController, ArcElement, RadarController, RadialLinearScale, PieController, PolarAreaController, BubbleController, ScatterController, TimeSeriesScale);
export class NgChartsModule {
    constructor(config) {
        if (config?.plugins)
            Chart.register(...config?.plugins);
        const ngChartsDefaults = merge(builtInDefaults, config?.defaults || {});
        defaults.set(ngChartsDefaults);
    }
    static forRoot(config) {
        return {
            ngModule: NgChartsModule,
            providers: [
                { provide: NgChartsConfiguration, useValue: config }
            ]
        };
    }
}
NgChartsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgChartsModule, deps: [{ token: NgChartsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });
NgChartsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgChartsModule, declarations: [BaseChartDirective], exports: [BaseChartDirective] });
NgChartsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgChartsModule, imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgChartsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [BaseChartDirective],
                    exports: [BaseChartDirective]
                }]
        }], ctorParameters: function () { return [{ type: NgChartsConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
export class NgChartsConfiguration {
}
NgChartsConfiguration.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgChartsConfiguration, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NgChartsConfiguration.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgChartsConfiguration, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgChartsConfiguration, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRzLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nMi1jaGFydHMvc3JjL2xpYi9uZy1jaGFydHMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQXVCLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUNMLFVBQVUsRUFDVixhQUFhLEVBQ2IsVUFBVSxFQUNWLGdCQUFnQixFQUNoQixhQUFhLEVBQ2IsS0FBSyxFQUdMLFFBQVEsRUFDUixrQkFBa0IsRUFDbEIsTUFBTSxFQUNOLE1BQU0sRUFDTixXQUFXLEVBQ1gsY0FBYyxFQUNkLFdBQVcsRUFDWCxhQUFhLEVBQ2IsWUFBWSxFQUNaLG1CQUFtQixFQUNuQixlQUFlLEVBQ2YsaUJBQWlCLEVBQ2pCLGlCQUFpQixFQUNqQixlQUFlLEVBQ2YsS0FBSyxFQUNMLE9BQU8sRUFDUixNQUFNLFVBQVUsQ0FBQztBQUNsQixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxjQUFjLENBQUM7O0FBRS9DLEtBQUssQ0FBQyxRQUFRLENBQ1osS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUM5QixjQUFjLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUNyRSxhQUFhLEVBQUUsVUFBVSxFQUN6QixrQkFBa0IsRUFBRSxVQUFVLEVBQzlCLGVBQWUsRUFBRSxpQkFBaUIsRUFDbEMsYUFBYSxFQUNiLG1CQUFtQixFQUNuQixnQkFBZ0IsRUFDaEIsaUJBQWlCLEVBQ2pCLGVBQWUsQ0FBQyxDQUFDO0FBT25CLE1BQU0sT0FBTyxjQUFjO0lBRXpCLFlBQXdCLE1BQThCO1FBQ3BELElBQUksTUFBTSxFQUFFLE9BQU87WUFDakIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUVyQyxNQUFNLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxlQUFlLEVBQUUsTUFBTSxFQUFFLFFBQVEsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUV4RSxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBOEI7UUFDbEQsT0FBTztZQUNMLFFBQVEsRUFBRSxjQUFjO1lBQ3hCLFNBQVMsRUFBRTtnQkFDVCxFQUFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO2FBQ3JEO1NBQ0YsQ0FBQztJQUNKLENBQUM7OzJHQWxCVSxjQUFjLGtCQUVRLHFCQUFxQjs0R0FGM0MsY0FBYyxpQkFIVCxrQkFBa0IsYUFDdkIsa0JBQWtCOzRHQUVsQixjQUFjLFlBSmhCLEVBQUU7MkZBSUEsY0FBYztrQkFMMUIsUUFBUTttQkFBQztvQkFDUixPQUFPLEVBQUUsRUFBRTtvQkFDWCxZQUFZLEVBQUUsQ0FBRSxrQkFBa0IsQ0FBRTtvQkFDcEMsT0FBTyxFQUFFLENBQUUsa0JBQWtCLENBQUU7aUJBQ2hDOzBEQUdrQyxxQkFBcUI7MEJBQXpDLFFBQVE7O0FBb0J2QixNQUFNLE9BQU8scUJBQXFCOztrSEFBckIscUJBQXFCO3NIQUFyQixxQkFBcUIsY0FEUixNQUFNOzJGQUNuQixxQkFBcUI7a0JBRGpDLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYXNlQ2hhcnREaXJlY3RpdmUgfSBmcm9tICcuL2Jhc2UtY2hhcnQuZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gIEFyY0VsZW1lbnQsXG4gIEJhckNvbnRyb2xsZXIsXG4gIEJhckVsZW1lbnQsXG4gIEJ1YmJsZUNvbnRyb2xsZXIsXG4gIENhdGVnb3J5U2NhbGUsXG4gIENoYXJ0LFxuICBDaGFydENvbXBvbmVudExpa2UsXG4gIENoYXJ0Q29uZmlndXJhdGlvbiwgRGVmYXVsdHMsXG4gIGRlZmF1bHRzLFxuICBEb3VnaG51dENvbnRyb2xsZXIsXG4gIEZpbGxlcixcbiAgTGVnZW5kLFxuICBMaW5lYXJTY2FsZSxcbiAgTGluZUNvbnRyb2xsZXIsXG4gIExpbmVFbGVtZW50LFxuICBQaWVDb250cm9sbGVyLFxuICBQb2ludEVsZW1lbnQsXG4gIFBvbGFyQXJlYUNvbnRyb2xsZXIsXG4gIFJhZGFyQ29udHJvbGxlcixcbiAgUmFkaWFsTGluZWFyU2NhbGUsXG4gIFNjYXR0ZXJDb250cm9sbGVyLFxuICBUaW1lU2VyaWVzU2NhbGUsXG4gIFRpdGxlLFxuICBUb29sdGlwXG59IGZyb20gJ2NoYXJ0LmpzJztcbmltcG9ydCB7IG1lcmdlIH0gZnJvbSBcImxvZGFzaC1lc1wiO1xuaW1wb3J0IHsgYnVpbHRJbkRlZmF1bHRzIH0gZnJvbSBcIi4vZ2V0LWNvbG9yc1wiO1xuXG5DaGFydC5yZWdpc3RlcihcbiAgVGl0bGUsIFRvb2x0aXAsIEZpbGxlciwgTGVnZW5kLFxuICBMaW5lQ29udHJvbGxlciwgTGluZUVsZW1lbnQsIFBvaW50RWxlbWVudCwgTGluZWFyU2NhbGUsIENhdGVnb3J5U2NhbGUsXG4gIEJhckNvbnRyb2xsZXIsIEJhckVsZW1lbnQsXG4gIERvdWdobnV0Q29udHJvbGxlciwgQXJjRWxlbWVudCxcbiAgUmFkYXJDb250cm9sbGVyLCBSYWRpYWxMaW5lYXJTY2FsZSxcbiAgUGllQ29udHJvbGxlcixcbiAgUG9sYXJBcmVhQ29udHJvbGxlcixcbiAgQnViYmxlQ29udHJvbGxlcixcbiAgU2NhdHRlckNvbnRyb2xsZXIsXG4gIFRpbWVTZXJpZXNTY2FsZSk7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtdLFxuICBkZWNsYXJhdGlvbnM6IFsgQmFzZUNoYXJ0RGlyZWN0aXZlIF0sXG4gIGV4cG9ydHM6IFsgQmFzZUNoYXJ0RGlyZWN0aXZlIF1cbn0pXG5leHBvcnQgY2xhc3MgTmdDaGFydHNNb2R1bGUge1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIGNvbmZpZz86IE5nQ2hhcnRzQ29uZmlndXJhdGlvbikge1xuICAgIGlmIChjb25maWc/LnBsdWdpbnMpXG4gICAgICBDaGFydC5yZWdpc3RlciguLi5jb25maWc/LnBsdWdpbnMpO1xuXG4gICAgY29uc3QgbmdDaGFydHNEZWZhdWx0cyA9IG1lcmdlKGJ1aWx0SW5EZWZhdWx0cywgY29uZmlnPy5kZWZhdWx0cyB8fCB7fSk7XG5cbiAgICBkZWZhdWx0cy5zZXQobmdDaGFydHNEZWZhdWx0cyk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGZvclJvb3QoY29uZmlnPzogTmdDaGFydHNDb25maWd1cmF0aW9uKTogTW9kdWxlV2l0aFByb3ZpZGVyczxOZ0NoYXJ0c01vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmdDaGFydHNNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgeyBwcm92aWRlOiBOZ0NoYXJ0c0NvbmZpZ3VyYXRpb24sIHVzZVZhbHVlOiBjb25maWcgfVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBOZ0NoYXJ0c0NvbmZpZ3VyYXRpb24ge1xuICBwdWJsaWMgcGx1Z2lucz86IENoYXJ0Q29tcG9uZW50TGlrZVtdO1xuICBwdWJsaWMgZGVmYXVsdHM/OiBQYXJ0aWFsPERlZmF1bHRzPjtcbn1cbiJdfQ==