# Test des op√©rations avec frais
Write-Host "=== TEST DES OP√âRATIONS AVEC FRAIS ===" -ForegroundColor Green

# URL de base
$baseUrl = "http://localhost:8080/api"

# Test 1: R√©cup√©rer toutes les op√©rations avec frais
Write-Host "`n1. R√©cup√©ration de toutes les op√©rations avec frais..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$baseUrl/operations/with-frais" -Method GET
    Write-Host "‚úÖ Succ√®s: ${response.Count} op√©rations r√©cup√©r√©es" -ForegroundColor Green
    
    # Afficher les premi√®res op√©rations avec frais
    $operationsWithFrais = $response | Where-Object { $_.fraisApplicable -eq $true }
    Write-Host "üìä Op√©rations avec frais applicables: ${operationsWithFrais.Count}" -ForegroundColor Cyan
    
    if ($operationsWithFrais.Count -gt 0) {
        Write-Host "`nüìã Exemples d'op√©rations avec frais:" -ForegroundColor Cyan
        $operationsWithFrais | Select-Object -First 3 | ForEach-Object {
            Write-Host "  - ID: $($_.id), Service: $($_.service), Montant: $($_.montant) FCFA" -ForegroundColor White
            Write-Host "    Frais: $($_.montantFrais) FCFA ($($_.typeCalculFrais)), Description: $($_.descriptionFrais)" -ForegroundColor Gray
        }
    }
    
} catch {
    Write-Host "‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 2: R√©cup√©rer une op√©ration sp√©cifique avec frais
Write-Host "`n2. R√©cup√©ration d'une op√©ration sp√©cifique avec frais..." -ForegroundColor Yellow
try {
    # R√©cup√©rer d'abord la liste des op√©rations pour avoir un ID
    $operations = Invoke-RestMethod -Uri "$baseUrl/operations" -Method GET
    if ($operations.Count -gt 0) {
        $firstOperationId = $operations[0].id
        Write-Host "üîç Test avec l'op√©ration ID: $firstOperationId" -ForegroundColor Cyan
        
        $response = Invoke-RestMethod -Uri "$baseUrl/operations/$firstOperationId/with-frais" -Method GET
        Write-Host "‚úÖ Succ√®s: Op√©ration r√©cup√©r√©e" -ForegroundColor Green
        Write-Host "üìã D√©tails:" -ForegroundColor Cyan
        Write-Host "  - ID: $($response.id), Type: $($response.typeOperation), Service: $($response.service)" -ForegroundColor White
        Write-Host "  - Montant: $($response.montant) FCFA" -ForegroundColor White
        Write-Host "  - Frais applicable: $($response.fraisApplicable)" -ForegroundColor White
        if ($response.fraisApplicable) {
            Write-Host "  - Montant frais: $($response.montantFrais) FCFA" -ForegroundColor White
            Write-Host "  - Type calcul: $($response.typeCalculFrais)" -ForegroundColor White
            Write-Host "  - Description: $($response.descriptionFrais)" -ForegroundColor White
        }
    } else {
        Write-Host "‚ö†Ô∏è Aucune op√©ration trouv√©e pour le test" -ForegroundColor Yellow
    }
    
} catch {
    Write-Host "‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 3: R√©cup√©rer les op√©rations d'un compte avec frais
Write-Host "`n3. R√©cup√©ration des op√©rations d'un compte avec frais..." -ForegroundColor Yellow
try {
    # R√©cup√©rer d'abord la liste des comptes
    $comptes = Invoke-RestMethod -Uri "$baseUrl/comptes" -Method GET
    if ($comptes.Count -gt 0) {
        $firstCompteId = $comptes[0].id
        Write-Host "üîç Test avec le compte ID: $firstCompteId" -ForegroundColor Cyan
        
        $response = Invoke-RestMethod -Uri "$baseUrl/operations/compte/$firstCompteId/with-frais" -Method GET
        Write-Host "‚úÖ Succ√®s: ${response.Count} op√©rations r√©cup√©r√©es pour le compte" -ForegroundColor Green
        
        $operationsWithFrais = $response | Where-Object { $_.fraisApplicable -eq $true }
        Write-Host "üìä Op√©rations avec frais pour ce compte: ${operationsWithFrais.Count}" -ForegroundColor Cyan
        
    } else {
        Write-Host "‚ö†Ô∏è Aucun compte trouv√© pour le test" -ForegroundColor Yellow
    }
    
} catch {
    Write-Host "‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 4: Comparaison avec les frais existants
Write-Host "`n4. Comparaison avec les frais de transaction existants..." -ForegroundColor Yellow
try {
    # R√©cup√©rer les frais de transaction existants
    $fraisTransactions = Invoke-RestMethod -Uri "$baseUrl/frais-transactions" -Method GET
    Write-Host "üìä Frais de transaction existants: ${fraisTransactions.Count}" -ForegroundColor Cyan
    
    # R√©cup√©rer les op√©rations avec frais calcul√©s
    $operationsWithFrais = Invoke-RestMethod -Uri "$baseUrl/operations/with-frais" -Method GET
    $operationsWithFraisApplicable = $operationsWithFrais | Where-Object { $_.fraisApplicable -eq $true }
    
    Write-Host "üìä Op√©rations avec frais applicables: ${operationsWithFraisApplicable.Count}" -ForegroundColor Cyan
    
    # Calculer le total des frais
    $totalFraisCalcules = ($operationsWithFraisApplicable | Measure-Object -Property montantFrais -Sum).Sum
    $totalFraisTransactions = ($fraisTransactions | Measure-Object -Property montantFrais -Sum).Sum
    
    Write-Host "üí∞ Total des frais calcul√©s: $totalFraisCalcules FCFA" -ForegroundColor Green
    Write-Host "üí∞ Total des frais de transaction: $totalFraisTransactions FCFA" -ForegroundColor Green
    
} catch {
    Write-Host "‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n=== FIN DES TESTS ===" -ForegroundColor Green 