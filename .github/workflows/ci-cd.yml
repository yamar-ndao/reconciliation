name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job Backend - Tests et Build Spring Boot
  backend:
    name: Backend Tests & Build
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: reconciliation_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: 'maven'

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run Backend Tests
      working-directory: ./reconciliation-app/backend
      run: |
        mvn clean test -Dspring.profiles.active=test
        mvn verify -Dspring.profiles.active=test

    - name: Build Backend JAR
      working-directory: ./reconciliation-app/backend
      run: mvn clean package -DskipTests

    - name: Upload Backend Artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: ./reconciliation-app/backend/target/*.jar

  # Job Frontend - Tests et Build Angular
  frontend:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: reconciliation-app/frontend/package-lock.json

    - name: Install Frontend Dependencies
      working-directory: ./reconciliation-app/frontend
      run: npm ci

    - name: Run Frontend Tests
      working-directory: ./reconciliation-app/frontend
      run: |
        npm run test -- --watch=false --browsers=ChromeHeadless
        npm run lint

    - name: Build Frontend for Production
      working-directory: ./reconciliation-app/frontend
      run: npm run build --prod

    - name: Upload Frontend Artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: ./reconciliation-app/frontend/dist/

  # Job de Qualit√© du Code
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Job de D√©ploiement (uniquement sur main)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend, frontend, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Backend Artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: ./artifacts/backend

    - name: Download Frontend Artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: ./artifacts/frontend

    - name: Deploy to Server
      run: |
        echo "Deployment would happen here"
        echo "Backend JAR: $(ls -la ./artifacts/backend/)"
        echo "Frontend files: $(ls -la ./artifacts/frontend/)"
        # Ici tu peux ajouter tes commandes de d√©ploiement
        # Par exemple : scp, rsync, ou d√©ploiement sur cloud

    - name: Notify Deployment Success
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "üåê Application deployed to production"
        echo "üìä Backend: http://your-backend-url"
        echo "üé® Frontend: http://your-frontend-url"

  # Job de Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
    - name: Notify on Success
      if: success()
      run: |
        echo "üéâ Pipeline completed successfully!"
        echo "üìß Sending success notification..."

    - name: Notify on Failure
      if: failure()
      run: |
        echo "‚ùå Pipeline failed!"
        echo "üìß Sending failure notification..." 